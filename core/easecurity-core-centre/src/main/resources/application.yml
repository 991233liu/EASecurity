server:
   name: SecurityCentre
   port: 80
   servlet:
      context-path: /SecurityCentre
      session:
         timeout: 7200   # 单位秒，最小60秒。如果启用了@EnableRedisHttpSession注解，则此配置失效，由@EnableRedisHttpSession直接控制
         cookie:
            name: EASECURITY_S
            path: /
            httpOnly: true

spring:
   messages:
      basename: i18n/messages
      encoding: UTF-8
   profiles:
      include: easecurity
# 数据库配置
   datasource:
      username: easuser
      password: easuser
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://128.0.0.2:3306/easecurity?serverTimezone=UTC&useUnicode=true&characterEncoding=UTF8
   jpa:
      show-sql: true # 打印 SQL 。生产环境，建议关闭
      # Hibernate 配置内容，对应 HibernateProperties 类
      hibernate:
        # if false, uses the Grails DirtyCheckable; if true, uses Hibernate checking.
        # if true, The implementation modifies all setters of your class so that dirty checking is tracked per field. However, there is
        # one corner case where you do name = "blah" in a method internal to the class, the setter will not be called and
        # property will not be marked as dirty. Hence, changing it to setName("blah") resolves the issue.
        hibernateDirtyChecking: true
        ddl-auto: validate
        cache:
          queries: false
          use_second_level_cache: false
          use_query_cache: false
    
# 缓存配置
   cache:
      type: redis
   redis:
      host: 128.0.0.2
      port: 16379
#      password: 123456
      database: 1
      timeout: 3000
      lettuce:
         pool:
            max-wait: 1000  # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接 抛出JedisConnectionException
            max-active: 5   # 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool 的状态为exhausted(耗尽)
            max-idle: 1     # 连接池中的最大空闲连接，默认值也是8。
            min-idle: 1     # 连接池中的最小空闲连接，默认值也是0。
         shutdown-timeout: 10000ms  # 关闭超时时间
# 设置Redis序列化类。对于稳定的生产系统，建议选用最快速的序列化类；对于开发或者刚上线的系统，建议选用易解读的序列化类。
# 目前支持常见的RedisTemplate类。包括：
# 支持自定义，自定义类需要实现com.easecurity.core.redis.OemRedisSerializer接口
      serializer:
         key: StringRedisSerializer
#         value: Jackson2JsonRedisSerializer
         value: Jackson2JsonRedisSerializer
         hashkey: StringRedisSerializer
         hashvalue: GenericJackson2JsonRedisSerializer

---
# 多redis支持
redises.datasources:
   redis1:
      host: 128.0.0.2
      port: 16379
#      password: 123456
      database: 1
      timeout: 3000
      lettuce:
         pool:
            max-wait: 1000  # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接 抛出JedisConnectionException
            max-active: 5   # 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool 的状态为exhausted(耗尽)
            max-idle: 1     # 连接池中的最大空闲连接，默认值也是8。
            min-idle: 1     # 连接池中的最小空闲连接，默认值也是0。
         shutdown-timeout: 10000ms  # 关闭超时时间
# 设置Redis序列化类。对于稳定的生产系统，建议选用最快速的序列化类；对于开发或者刚上线的系统，建议选用易解读的序列化类。
# 目前支持常见的RedisTemplate类。包括：
# 支持自定义，自定义类需要实现com.easecurity.core.redis.OemRedisSerializer接口
      serializer:
         key: StringRedisSerializer
#         value: Jackson2JsonRedisSerializer
         value: GenericJackson2JsonRedisSerializer
         hashkey: StringRedisSerializer
         hashvalue: GenericJackson2JsonRedisSerializer
   redis2:
      host: 128.0.0.2
      port: 16379
#      password: 123456
      database: 2
      timeout: 3000
      lettuce:
         pool:
            max-wait: 1000  # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接 抛出JedisConnectionException
            max-active: 5   # 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool 的状态为exhausted(耗尽)
            max-idle: 1     # 连接池中的最大空闲连接，默认值也是8。
            min-idle: 1     # 连接池中的最小空闲连接，默认值也是0。
         shutdown-timeout: 10000ms  # 关闭超时时间
# 设置Redis序列化类。对于稳定的生产系统，建议选用最快速的序列化类；对于开发或者刚上线的系统，建议选用易解读的序列化类。
# 目前支持常见的RedisTemplate类。包括：
# 支持自定义，自定义类需要实现com.easecurity.core.redis.OemRedisSerializer接口
      serializer:
         key: StringRedisSerializer
#         value: Jackson2JsonRedisSerializer
         value: GenericJackson2JsonRedisSerializer
         hashkey: StringRedisSerializer
         hashvalue: GenericJackson2JsonRedisSerializerrrrr
         
logging:
#   file:
#      path: logs
#      max-size: 100MB
#      max-history: 20
   level:
      root: INFO
      com:
         easecurity: DEBUG
   pattern:
      console: '%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%-5p)--%clr([%.12t]){faint} %c{50}%clr([%F:%L]){cyan}: %m%n%wex'
#      file: '%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%-5p)--%clr([%thread]){faint} %clr(%c){faint}%clr([%F:%L]){cyan}: %m%n%wex'
