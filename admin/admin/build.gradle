buildscript {
    repositories {
//        maven { url "https://maven.aliyun.com/repository/public/" }
//        maven { url "https://maven.aliyun.com/repository/central" }
//        maven { url "https://maven.aliyun.com/nexus/content/repositories/central" }
        maven { url "https://maven.aliyun.com/repository/grails-core" }
        maven { url "http://maven.geotoolkit.org" }
        maven { url "https://repo.grails.org/grails/core" }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:7.0.5"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.2.4"
        classpath "com.bmuschko:gradle-docker-plugin:6.4.0"
    }
}

repositories {
    maven { url "https://maven.aliyun.com/repository/grails-core" }
    maven { url "http://maven.geotoolkit.org" }
    maven { url "https://repo.grails.org/grails/core" }
    mavenLocal()
    mavenCentral()
}

group "com.easecurity"
version "0.1"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-web"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin: "org.grails.grails-gsp"
apply plugin: "com.bmuschko.docker-remote-api"

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    compile "com.easecurity:easecurity-core-api:0.0.1"
//    compile project(":easecurity-core-api")
//    compile project(":easecurity-core-api")
    developmentOnly("org.springframework.boot:spring-boot-devtools")

    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
//    compile 'org.grails.plugins:spring-security-core:4.0.2'
//    compile 'org.springframework.boot:spring-boot-starter-security'
    compile "org.grails:grails-core"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.4.18.Final"
    compile "org.grails.plugins:gsp"
    compile 'org.grails.plugins:spring-security-core:4.0.3'
    compile 'org.codehaus.groovy:groovy-dateutil'
    compile 'mysql:mysql-connector-java'
    compile 'org.grails.plugins:quartz:2.0.13'
    compile("org.quartz-scheduler:quartz:2.2.3") {
        exclude module: 'slf4j-api'
        exclude module: 'c3p0'
    }

    compileOnly "io.micronaut:micronaut-inject-groovy"

    console "org.grails:grails-console"
    profile "org.grails.profiles:web"

    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.1"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.2.4"

    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
}

assets {
    minifyJs = true
    minifyCss = true
    includes = ["adminlte2/*"]
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

/*
webdriverBinaries {
    chromedriver '2.45.0'
    geckodriver '0.24.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}
*/

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

ext {
    dockerTag = [
            "128.0.0.2:5000/com.easecurity/${project.name}:${project.version}".toLowerCase(),
            "128.0.0.2:5000/com.easecurity/${project.name}:latest".toLowerCase()
    ]
    dockerBuildDir = mkdir("${buildDir}/docker")
}
docker {
    url = 'http://128.0.0.2:2375'
}

task prepareDocker(type: Copy, dependsOn: assemble) {
    description = 'Copy files from src/main/docker and application jar to Docker temporal build directory'
    group = 'Docker'

    from 'src/main/docker'
    from 'build/resources/main/application.yml'
    from 'build/resources/main/application-easecurity.yml'
    from project.jar

    into dockerBuildDir
}
task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
    description = 'Create a Dockerfile file'
    group = 'Docker'

    destFile = project.file("${dockerBuildDir}/Dockerfile")

    from 'openjdk:8-alpine-font'

    exposePort 8080

    workingDir '/app'

    copyFile jar.archiveName, 'application.jar'
    copyFile 'app-entrypoint.sh', 'app-entrypoint.sh'
    copyFile 'application.yml', 'conf/application.yml'
    copyFile 'application-easecurity.yml', 'conf/application-easecurity.yml'
    runCommand 'mkdir -p /app/log'
    runCommand 'chmod 755 /app/log'
    runCommand 'chmod +x app-entrypoint.sh'

    entryPoint '/app/app-entrypoint.sh'
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    description = 'Create Docker image to run the Grails application'
    group = 'Docker'

    inputDir = file(dockerBuildDir)
    images.addAll(dockerTag)
}
