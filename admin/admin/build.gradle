buildscript {
    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:7.2.2"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.4"
        classpath "com.bmuschko:gradle-docker-plugin:6.4.0"
    }
}

repositories {
    mavenLocal()
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://repo.grails.org/grails/core" }
}

group "com.easecurity"
version "0.1"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin: "com.bmuschko.docker-remote-api"

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    implementation "com.easecurity:easecurity-core-api:0.0.1"
//    implementation project(":easecurity-core-api")
//    implementation project(":easecurity-core-api")
    implementation 'org.grails.plugins:spring-security-core:4.0.3'
    implementation 'org.codehaus.groovy:groovy-dateutil'
    implementation 'mysql:mysql-connector-java'
    implementation 'org.grails.plugins:quartz:2.0.13'
    implementation("org.quartz-scheduler:quartz:2.2.3") {
        exclude module: 'slf4j-api'
        exclude module: 'c3p0'
    }

    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.hibernate:hibernate-core:5.6.5.Final"
    implementation "org.grails.plugins:gsp"

    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"

    runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"
    runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"

    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.3.4"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
}

assets {
    minifyJs = true
    minifyCss = true
    includes = ["adminlte2/*"]
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

ext {
    jarNmae = "${project.name}-${project.version}.jar"
    dockerTag = [
            "128.0.0.2:5000/com.easecurity/${project.name}:${project.version}".toLowerCase(),
            "128.0.0.2:5000/com.easecurity/${project.name}:latest".toLowerCase()
    ]
    dockerBuildDir = mkdir("${buildDir}/docker")
}
docker {
    url = 'http://128.0.0.2:2375'
}

task prepareDocker(type: Copy, dependsOn: assemble) {
    description = 'Copy files from src/main/docker and application jar to Docker temporal build directory'
    group = 'Docker'

    from 'src/main/docker'
    from 'build/resources/main/application.yml'
    from 'build/resources/main/application-easecurity.yml'
    from 'build/libs/'+jarNmae
//    from project.jar

    into dockerBuildDir
}
task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
    description = 'Create a Dockerfile file'
    group = 'Docker'

    destFile = project.file("${dockerBuildDir}/Dockerfile")

    from 'openjdk:8-alpine-font'

    exposePort 8080

    workingDir '/app'
    copyFile jarNmae, 'application.jar'
    copyFile 'app-entrypoint.sh', 'app-entrypoint.sh'
    copyFile 'application.yml', 'conf/application.yml'
    copyFile 'application-easecurity.yml', 'conf/application-easecurity.yml'
    runCommand 'mkdir -p /app/log'
    runCommand 'chmod 755 /app/log'
    runCommand 'chmod +x app-entrypoint.sh'

    entryPoint '/app/app-entrypoint.sh'
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    description = 'Create Docker image to run the Grails application'
    group = 'Docker'

    inputDir = file(dockerBuildDir)
    images.addAll(dockerTag)
}
